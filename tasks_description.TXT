1. Напишите функцию, которая запускает горутину, выполняющую fmt.Println("Hello from goroutine!"), и использует sync.WaitGroup для ожидания ее завершения.
2. Запуск нескольких горутин и ожидание их завершения. Напишите программу, которая запускает 5 горутин, каждая из которых печатает свой номер от 1 до 5 и использует sync.WaitGroup для их синхронизации (нужно подождать их выполнения).
3. Использование канала для передачи данных. Напишите функцию, которая создает горутину, отправляющую числа от 1 до 5 в канал, а затем в main извлекает их и складывает, результат выводит на консоль.
4. Задача: Напишите программу, где 10 горутин инкрементируют один счётчик, защищая его sync.Mutex.
5. Задача: Напишите программу, где 10 горутин инкрементируют один счётчик без использования мютексов, через атомики.
6. ЗАДАЧА: Батчевая обработка с использованием select и context 
Реализуй функцию StartBatchProcessor(ctx context.Context, input <-chan int), которая:
Собирает числа из канала input в батчи по максимум 5 элементов.
Если в течение 2 секунд батч не собран — обрабатывает то, что есть.
Обработка батча — это просто fmt.Println("Processed batch:", batch).
Выход из функции должен происходить при отмене контекста (ctx.Done()).
Всё реализовано через select.
Дополнительно:
Отмена должна происходить либо через context.WithTimeout, либо вручную через cancel() — попробовать оба варианта